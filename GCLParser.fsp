%{
open GCLTypesAST
%}

%token <int> NUM
%token <string> VARNAME
%token ASSGN TIMES DIV PLUS MINUS POW LPAR RPAR SRB SLB SEMICOLON TT FF UAND UOR AND OR NOT EQ NEQ GT GTE LT LTE SKIP IF DO ENDDO ENDIF ARROW COMPOSE EOF 

// Figure out associativity
%left TIMES DIV PLUS MINUS UAND UOR AND OR
%right POW COMPOSE SEMICOLON NOT

%start start

// We specify the return type of each of then non-terminal symbols
%type <command> start
%type <command> C
%type <gCommand> GC
%type <aexpr> a
%type <bexpr> b

%%
// Start node is a command
start: C EOF             { $1 }

// definition of arithmetical expression
a:
    | VARNAME                 { VAR($1) }
    | NUM                     { Num($1) }
    | MINUS a                 { UMinusExpr($2) }
    | PLUS a                  { UPlusExpr($2) }
    | VARNAME SLB a SRB     { Array($1,$3) }
    | a PLUS a                { PlusExpr($1,$3) }
    | a MINUS a               { MinusExpr($1,$3) }
    | a TIMES a               { TimesExpr($1,$3) }
    | a DIV a                 { DivExpr($1,$3) }
    | a POW a                 { PowExpr($1,$3) }
    | LPAR a RPAR             { $2 }

// boolean expression parser rules
b: 
    | TT { T }
    | FF { F }
    | b UAND b { UANDExpr($1,$3) }
    | b UOR b { UORExpr($1,$3) }
    | b AND b { ANDExpr($1,$3) }
    | b OR b { ORExpr($1,$3) }
    | NOT b { NOTExpr($2) }
    | a EQ a { EQExpr($1,$3) }
    | a NEQ a { NEQExpr($1,$3) }
    | a GT a { GTExpr($1,$3) }
    | a GTE a { GTEExpr($1,$3) }
    | a LT a { LTExpr($1,$3) }
    | a LTE a { LTEqExpr($1,$3) } 
    | LPAR b RPAR { $2 }


// command parser rules
C: 
    | IF GC ENDIF { If($2) } 
    | DO GC ENDDO { Do($2) }
    | VARNAME ASSGN a { ASSIGN($1,$3) }
    | VARNAME SLB a SRB ASSGN a { ArrayAT($1,$3,$6) } // A[a]:=a
    | SKIP { Skip }
    | C SEMICOLON C { Compose($1,$3) }


// Guarded command parser rules
GC: 
    | GC COMPOSE GC { ExecuteGC($1,$3) }
    | b ARROW C { ExecuteIf($1,$3) }

%%